app:
  title: Backstage (Local Development)
  baseUrl: http://localhost:3000

organization:
  name: Open Source Infrastructure (as Code)

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    connect-src: ["'self'", "http:", "https:"]
    img-src: ["'self'", "data:", "https://avatars.githubusercontent.com"]
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  database:
    client: better-sqlite3
    connection: ":memory:"
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir
  events:
    http:
      topics:
        - github
    modules:
      github:
        webhookSecret: ${GITHUB_APP_WEBHOOK_SECRET}

# integrations:
#   github:
#     - host: github.com
#       # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
#       # about setting up the GitHub integration here: https://backstage.io/docs/integrations/github/locations#configuration
#       token: ${GITHUB_TOKEN}
#     ### Example for how to add your GitHub Enterprise instance using the API:
#     # - host: ghe.example.net
#     #   apiBaseUrl: https://ghe.example.net/api/v3
#     #   token: ${GHE_TOKEN}

integrations:
  github:
    - host: github.com
      apps:
        - appId: ${GITHUB_APP_ID}
          clientId: ${GITHUB_APP_CLIENT_ID}
          clientSecret: ${GITHUB_APP_CLIENT_SECRET}
          privateKey: ${GITHUB_APP_PRIVATE_KEY}
          webhookSecret: ${GITHUB_APP_WEBHOOK_SECRET}

# proxy:
### Example for how to add a proxy endpoint for the frontend.
### A typical reason to do this is to handle HTTPS and CORS for internal services.
# endpoints:
#   '/test':
#     target: 'https://example.com'
#     changeOrigin: true

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: "local" # Alternatives - 'external'
  generator:
    runIn: "docker" # Alternatives - 'local'
  publisher:
    type: "local" # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

# auth:
#   # see https://backstage.io/docs/auth/ to learn about auth providers
#   providers:
#     # See https://backstage.io/docs/auth/guest/provider
#     guest: {}

auth:
  environment: shared
  providers:
    github:
      shared:
        clientId: ${GITHUB_AUTH_CLIENT_ID}
        clientSecret: ${GITHUB_AUTH_CLIENT_SECRET}
        signIn:
          resolvers:
            - resolver: usernameMatchingUserEntityName

  permissions:
    rules:
      - name: backstage-owners
        resourceType: all
        policy: allow
        conditions:
          - type: group
            group: owners

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options
  defaultAuthor:
    name: backstage-osinfra-io[bot]
    email: backstage@osinfra.io
  defaultCommitMessage: Initial commit

catalog:
  providers:
    githubOrg:
      id: github
      githubUrl: https://github.com
      orgs: [osinfra-io]
      schedule:
        initialDelay: { seconds: 30 }
        frequency: { minutes: 02 }
        timeout: { minutes: 60 }

    github:
      osinfraOrg:
        organization: osinfra-io
        catalogPath: /catalog-info.yaml
        filters:
          branch: main
          repository: ".*"
        schedule:
          initialDelay: { seconds: 30 }
          frequency: { minutes: 02 }
          timeout: { minutes: 60 }

  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location]
  locations:
    - type: file
      target: ../../catalog/entities.yaml
      rules:
        - allow: [Domain, System, Component, API]

    - type: url
      target: https://github.com/osinfra-io/backstage-github-repository-templates/blob/main/opentofu-child-module/template.yaml
      rules:
        - allow: [Template]

# kubernetes:
# see https://backstage.io/docs/features/kubernetes/configuration for kubernetes configuration options

# see https://backstage.io/docs/permissions/getting-started for more on the permission framework
permission:
  # setting this to `false` will disable permissions
  enabled: true
