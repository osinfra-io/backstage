backstage:
  extraContainers:
    - name: cloud-sql-proxy
      image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.14.2
      args:
        - --private-ip
        - --port=5432
      securityContext:
        runAsNonRoot: true
      resources:
        limits:
          memory: 1Gi
          cpu: 100m
        requests:
          memory: 128Mi
          cpu: 10m

  extraEnvVarsSecrets:
    - github-app-credentials
    - postgres-secrets

  image:
    repository: backstage

  podLabels:
   tags.datadoghq.com/service: backstage

  readinessProbe:
    failureThreshold: 3
    httpGet:
      path: /.backstage/health/v1/readiness
      port: 7007
      scheme: HTTP
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 2
    timeoutSeconds: 2

  livenessProbe:
    failureThreshold: 3
    httpGet:
      path: /.backstage/health/v1/liveness
      port: 7007
      scheme: HTTP
    initialDelaySeconds: 60
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 2

  startupProbe:
    failureThreshold: 3
    httpGet:
      path: /.backstage/health/v1/liveness
      port: 7007
      scheme: HTTP
    initialDelaySeconds: 60
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 2

  appConfig:
    app:
      title: Backstage (Sandbox)
      baseUrl: https://backstage-us-east1.sb.gcp.osinfra.io

    organization:
      name: Open Source Infrastructure (as Code)

    backend:
      baseUrl: https://backstage-us-east1.sb.gcp.osinfra.io

      database:
        client: pg
        connection:
          host: localhost
          port: 5432
          user: ${POSTGRES_USER}
          password: ${POSTGRES_PASSWORD}

    integrations:
      github:
        - host: github.com
          apps:
            - appId: ${GITHUB_APP_ID}
              clientId: ${GITHUB_APP_CLIENT_ID}
              clientSecret: ${GITHUB_APP_CLIENT_SECRET}
              privateKey: ${GITHUB_APP_PRIVATE_KEY}
              webhookSecret: ${GITHUB_APP_WEBHOOK_SECRET}

    techdocs:
      builder: 'local'
      generator:
        runIn: 'docker'
      publisher:
        type: 'local'

    auth:
      providers:
        gcpIap:
          audience: /projects/362793201562/global/backendServices/7729084992786470695
          # signIn:
          #   resolvers:
          #     - resolver: emailMatchingUserEntityProfileEmail

      permissions:
        rules:
          - name: backstage-admin-rule
            resourceType: all
            policy: allow
            conditions:
              - type: group
                group: admins

    catalog:
      locations:
        - type: file
          target: ./examples/admin.yaml
          rules:
            - allow: [User, Group]
      providers:
        githubOrg:
          id: github
          githubUrl: https://github.com
          orgs: [osinfra-io]
          schedule:
            initialDelay: { seconds: 30 }
            frequency: { hours: 24 }
            timeout: { minutes: 50 }

    permission:
      enabled: true

service:
  annotations:
    cloud.google.com/backend-config: '{"default": "backstage-backend"}'
  type: NodePort

serviceAccount:
  name: backstage-workload-identity-sa
